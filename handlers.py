from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, 
    CallbackQuery, 
    PreCheckoutQuery, 
    WebAppInfo, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    LabeledPrice
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import database as db
from config import ADMIN_ID, WEBAPP_URL, POLICY_URL, PAYMENT_PROVIDER_TOKEN
import logging

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ContentState(StatesGroup):
    waiting_for_price = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è file_id –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º
temp_admin_content = {}

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    db.add_user(user.id, user.username, user.first_name)
    
    logger.info(f"User {user.id} (@{user.username}) started bot")
    
    if db.is_user_banned(user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, *{user.first_name}*!\n\n"
        f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –ø–æ–∫—É–ø–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤.\n"
        f"–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á—Ç–∏ –Ω–∞—à—É [–ø–æ–ª–∏—Ç–∏–∫—É —Å–æ–≥–ª–∞—à–µ–Ω–∏—è]({POLICY_URL}).",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@router.message(Command("delete"))
async def cmd_delete(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <id>")
            return
            
        content_id = int(parts[1])
        
        if db.delete_content(content_id):
            await message.answer(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} —É–¥–∞–ª—ë–Ω.")
            logger.info(f"Admin deleted content #{content_id}")
        else:
            await message.answer(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <id>")

@router.message(Command("ban"))
async def cmd_ban(message: Message):
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <username>")
            return
            
        username = parts[1].replace('@', '')
        
        if db.ban_user(username):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            logger.info(f"Admin banned user @{username}")
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <username>")

@router.message(Command("approve"))
async def cmd_approve(message: Message):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <id>")
            return
            
        content_id = int(parts[1])
        
        if db.approve_content(content_id):
            await message.answer(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
            logger.info(f"Admin approved content #{content_id}")
        else:
            await message.answer(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <id>")

@router.message(F.photo | F.video | F.video_note)
async def handle_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –∫—Ä—É–∂–∫–æ–≤"""
    user = message.from_user
    
    if db.is_user_banned(user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.photo:
        content_type = "photo"
        file_id = message.photo[-1].file_id
    elif message.video_note:
        content_type = "video_note"
        file_id = message.video_note.file_id
    elif message.video:
        content_type = "video"
        file_id = message.video.file_id
    else:
        return
    
    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω
    if user.id == ADMIN_ID:
        temp_admin_content[user.id] = {
            'type': content_type,
            'file_id': file_id
        }
        await state.set_state(ContentState.waiting_for_price)
        await message.answer(
            "üìù –£–∫–∞–∂–∏ —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–≤ –∑–≤—ë–∑–¥–∞—Ö Telegram):\n"
            "‚Ä¢ 0 ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            "‚Ä¢ 1 –∏ –≤—ã—à–µ ‚Äî –ø–ª–∞—Ç–Ω–æ\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5"
        )
        logger.info(f"Admin uploading content, waiting for price")
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
        await message.answer("‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        admin_text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.id} ({user.first_name}) "
            f"–ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
            f"–¢–∏–ø: {content_type}"
        )
        
        try:
            if content_type == "photo":
                await message.bot.send_photo(ADMIN_ID, file_id, caption=admin_text)
            elif content_type == "video_note":
                await message.bot.send_video_note(ADMIN_ID, file_id)
                await message.bot.send_message(ADMIN_ID, admin_text)
            else:
                await message.bot.send_video(ADMIN_ID, file_id, caption=admin_text)
        except Exception as e:
            logger.error(f"Error sending to admin: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∫–∞–∫ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π
        content_id = db.add_content(content_type, file_id, 0, user.id, approved=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É ID –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
        await message.bot.send_message(
            ADMIN_ID, 
            f"üìå ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {content_id}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π: /approve {content_id}"
        )
        
        logger.info(f"User {user.id} submitted content #{content_id} for moderation")

@router.message(ContentState.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –æ—Ç –∞–¥–º–∏–Ω–∞"""
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        price = int(message.text.strip())
        
        if price < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
        
        content_data = temp_admin_content.get(message.from_user.id)
        if not content_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –º–µ–¥–∏–∞ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        content_id = db.add_content(
            content_data['type'],
            content_data['file_id'],
            price,
            ADMIN_ID,
            approved=True
        )
        
        price_text = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" if price == 0 else f"{price} ‚≠ê"
        await message.answer(
            f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìå ID: {content_id}\n"
            f"üí∞ –¶–µ–Ω–∞: {price_text}\n"
            f"üì± –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ WebApp"
        )
        
        logger.info(f"Admin added content #{content_id} with price {price}")
        
        del temp_admin_content[message.from_user.id]
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5")

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    logger.info(f"Pre-checkout from user {pre_checkout_query.from_user.id}")
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    content_id = int(payment.invoice_payload)
    user_id = message.from_user.id
    
    logger.info(f"Successful payment: user {user_id}, content {content_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –±–∞–∑—É
    db.add_purchase(user_id, content_id)
    
    content = db.get_content_by_id(content_id)
    if content:
        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {payment.total_amount} ‚≠ê\n"
            f"üì± –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –≤ WebApp"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        try:
            if content['type'] == 'photo':
                await message.answer_photo(
                    content['file_id'],
                    caption=f"üì∑ –¢–≤–æ—è –ø–æ–∫—É–ø–∫–∞ #{content_id}"
                )
            elif content['type'] == 'video_note':
                await message.answer_video_note(content['file_id'])
            else:
                await message.answer_video(
                    content['file_id'],
                    caption=f"üé• –¢–≤–æ—è –ø–æ–∫—É–ø–∫–∞ #{content_id}"
                )
        except Exception as e:
            logger.error(f"Error sending purchased content: {e}")
            await message.answer("–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")

@router.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.from_user.id == ADMIN_ID:
        await message.answer(
            "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/delete <id> - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "/ban @username - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/approve <id> - –û–¥–æ–±—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp"
        )