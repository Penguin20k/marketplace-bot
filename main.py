import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand
from aiohttp import web
import json

import database as db
from handlers import router
from config import BOT_TOKEN, PAYMENT_PROVIDER_TOKEN, USE_REAL_PAYMENTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# ‚úÖ –î–û–ë–ê–í–õ–ï–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–†–ù–ï–í–û–ì–û –ü–£–¢–ò
async def health_check(request):
    """Health check endpoint"""
    return web.json_response({'status': 'ok', 'bot': 'running'})

# WebApp API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
async def get_content(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ WebApp"""
    try:
        content_type = request.query.get('type')
        user_id = request.query.get('user_id')
        
        content_list = db.get_approved_content(content_type)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–∞—Ö –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id
        if user_id:
            try:
                uid = int(user_id)
                for item in content_list:
                    item['purchased'] = db.is_purchased(uid, item['id'])
            except ValueError:
                pass
        
        return web.json_response(content_list)
    except Exception as e:
        logger.error(f"Error in get_content: {e}")
        return web.json_response({'error': str(e)}, status=500)

async def get_purchases(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = request.query.get('user_id')
        
        if not user_id:
            return web.json_response({'error': 'user_id required'}, status=400)
        
        try:
            uid = int(user_id)
            purchases = db.get_user_purchases(uid)
            return web.json_response(purchases)
        except ValueError:
            return web.json_response({'error': 'invalid user_id'}, status=400)
    except Exception as e:
        logger.error(f"Error in get_purchases: {e}")
        return web.json_response({'error': str(e)}, status=500)

async def create_invoice(request):
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    try:
        data = await request.json()
        user_id = int(data['user_id'])
        content_id = int(data['content_id'])
        
        content = db.get_content_by_id(content_id)
        if not content:
            return web.json_response({'error': 'Content not found'}, status=404)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç
        if db.is_purchased(user_id, content_id):
            return web.json_response({'error': 'Already purchased'}, status=400)
        
        if content['price'] == 0:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–∫—É–ø–∫–∏
            db.add_purchase(user_id, content_id)
            return web.json_response({'success': True, 'free': True})
        
        # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        if not USE_REAL_PAYMENTS:
            logger.info(f"TEST MODE: Auto-purchasing content {content_id} for user {user_id}")
            db.add_purchase(user_id, content_id)
            return web.json_response({'success': True, 'test_mode': True})
        
        # –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)
        from aiogram.types import LabeledPrice
        
        prices = [LabeledPrice(label=f"–ö–æ–Ω—Ç–µ–Ω—Ç #{content_id}", amount=content['price'])]
        
        invoice_link = await bot.create_invoice_link(
            title=f"–ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ #{content_id}",
            description=f"–û–ø–ª–∞—Ç–∞ {content['type']}",
            payload=str(content_id),
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency='XTR',  # Telegram Stars
            prices=prices
        )
        
        return web.json_response({'invoice_link': invoice_link})
        
    except Exception as e:
        logger.error(f"Error creating invoice: {e}")
        return web.json_response({'error': str(e)}, status=500)

# CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub Pages
@web.middleware
async def cors_middleware(request, handler):
    """Middleware –¥–ª—è CORS"""
    if request.method == "OPTIONS":
        response = web.Response()
    else:
        try:
            response = await handler(request)
        except Exception as e:
            logger.error(f"Handler error: {e}")
            response = web.json_response({'error': str(e)}, status=500)
    
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
    return response

async def start_webhook_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è API"""
    app = web.Application(middlewares=[cors_middleware])
    
    # –†–æ—É—Ç—ã
    app.router.add_get('/', health_check)  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù
    app.router.add_head('/', health_check)  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù –¥–ª—è health checks
    app.router.add_get('/api/content', get_content)
    app.router.add_get('/api/purchases', get_purchases)
    app.router.add_post('/api/create_invoice', create_invoice)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info("‚úÖ API server started on http://0.0.0.0:8080")
    logger.info("üì° Endpoints:")
    logger.info("   GET  /")
    logger.info("   GET  /api/content")
    logger.info("   GET  /api/purchases")
    logger.info("   POST /api/create_invoice")

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="delete", description="[–ê–¥–º–∏–Ω] –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"),
        BotCommand(command="ban", description="[–ê–¥–º–∏–Ω] –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="approve", description="[–ê–¥–º–∏–Ω] –û–¥–æ–±—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"),
    ]
    await bot.set_my_commands(commands)
    logger.info("‚úÖ Bot commands set")

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.init_db()
    logger.info("‚úÖ Database initialized")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    await set_bot_commands()
    
    # –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
    asyncio.create_task(start_webhook_server())
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if USE_REAL_PAYMENTS:
        logger.info("üí≥ Payment mode: REAL PAYMENTS (Telegram Stars)")
    else:
        logger.info("üß™ Payment mode: TEST MODE (auto-purchase, no real payments)")
    
    logger.info("ü§ñ Bot started successfully!")
    logger.info("=" * 50)

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("‚èπÔ∏è Shutting down bot...")
    await bot.session.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await on_startup()
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error(f"Critical error: {e}")
    finally:
        await on_shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
